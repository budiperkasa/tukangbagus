<?php
/**
 * JobRoller Geoloaction functions
 * This file controls code for the Geolocation features.
 * Geolocation adapted from 'GeoLocation' plugin by Chris Boyd - http://geo.chrisboyd.net
 *
 *
 * @version 1.1
 * @author AppThemes
 * @package JobRoller
 * @copyright 2010 all rights reserved
 *
 */
 
define('JR_DEFAULT_ZOOM', 1);

function jr_clean_coordinate($coordinate) {
	//$pattern = '/^(\-)?(\d{1,3})\.(\d{1,15})/';
	$pattern = '/^(\-)?(\d{1,3}).(\d{1,15})/';
	preg_match($pattern, $coordinate, $matches);
	if (isset($matches[0])) return $matches[0];
}

function jr_reverse_geocode($latitude, $longitude) {

    $jr_gmaps_lang = get_option('jr_gmaps_lang');
	$jr_gmaps_region = get_option('jr_gmaps_region');
	$http = (is_ssl()) ? 'https' : 'http';
	
	$url = "http://maps.google.com/maps/api/geocode/json?latlng=".$latitude.",".$longitude."&language=".$jr_gmaps_lang."&region=".$jr_gmaps_region."&hl=".$jr_gmaps_lang."&sensor=false";

	$result = wp_remote_get($url);
	
	if( is_wp_error( $result ) ) :
		global $jr_log;
		$jr_log->write_log( __('Could not access Google Maps API. Your server may be blocking the request.', 'appthemes') ); 
		return false;
	endif;
	$json = json_decode($result['body']);
	$city = '';
	$country = '';
	$short_country = '';
	$state = '';

	foreach ($json->results as $result)
	{
		foreach($result->address_components as $addressPart) {
			if((in_array('locality', $addressPart->types)) && (in_array('political', $addressPart->types)))
	    		$city = $addressPart->long_name;
	    	else if((in_array('administrative_area_level_1', $addressPart->types)) && (in_array('political', $addressPart->types)))
	    		$state = $addressPart->long_name;
	    	else if((in_array('country', $addressPart->types)) && (in_array('political', $addressPart->types))) {
	    		$country = $addressPart->long_name;
	    		$short_country = $addressPart->short_name;
	    	}
		}
		if(($city) && ($state) && ($country)) break;
	}
			
	if(($city != '') && ($state != '') && ($country != ''))
		$address = $city.', '.$state.', '.$country;
	else if(($city != '') && ($state != ''))
		$address = $city.', '.$state;
	else if(($state != '') && ($country != ''))
		$address = $state.', '.$country;
	// fix for countries with no valid state
	else if(($city != '') && ($country !=''))
		$address = $city . ', ' . $country;							
	//		
	else if($country != '')
		$address = $country;
		
	if ($country=='United Kingdom') $short_country = 'UK';
		
	if(($city != '') && ($state != '') && ($country != '')) {
		$short_address = $city;
		$short_address_country = $state.', '.$country;
	} else if(($city != '') && ($state != '')) {
		$short_address = $city;
		$short_address_country = $state;
	} else if(($state != '') && ($country != '')) {
		$short_address = $state;
		$short_address_country = $country;
	// fix for countries with no valid state
	} else if(($city != '') && ($country != '')){
		$short_address = $city;
		$short_address_country = $country;
	//		
	} else if($country != '') {
		$short_address = $country;
		$short_address_country = '';
	}
	
	return array(
		'address' => $address,
		'country' => $country,
		'short_address' => $short_address,
		'short_address_country' => $short_address_country
	);
}


